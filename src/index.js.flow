// @flow

declare export var SET_PENDING: string
declare export var RESOLVE: string
declare export var REJECT: string

export type PromiseState<V, R> = {
  pending: boolean,
  fulfilled: boolean,
  rejected: boolean,
  value: ?V,
  reason: ?R,
}

type Action = {type: $Subtype<string>}

export type PromiseReducer<V, R> = (state: ?PromiseState<V, R>, action: Action) => PromiseState<V, R>

declare export var initialPromiseState: PromiseState<any, any>

declare export default function createReduxTrackPromise<V, R>(customizeActionType?: (actionType: string) => string): {
  setPending(pending?: boolean): {type: string},
  resolve(result?: V): {type: string, payload: ?V},
  reject(reason?: R): {type: string, payload: ?R, error: boolean},
  track(promise: Promise<V>, dispatch: (action: Action) => any): Promise<V>,
  reducer: PromiseReducer<V, R>,
}

